import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import sys  # To stop script on login failure

# Load Excel file
file_path = "C:/PAK/PAK_Standard_requirement.xlsx"
df = pd.read_excel(file_path)

# Set Chrome options
options = webdriver.ChromeOptions()
options.add_argument("--log-level=3")

# Function to access FTP Path
def access_ftp(driver, url):
    print(f"üîµ Accessing FTP: {url}")
    driver.get(url)

    try:
        # Wait for password input field
        password_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "sharecode"))
        )
        password_input.send_keys("w5qnqhgx")  # Hardcoded password
        password_input.send_keys(Keys.RETURN)
        print("üîµ Password entered, waiting for login response...")

        # Wait for page load
        time.sleep(5)

        # Check if Authentication Failed
        page_source = driver.page_source.lower()
        if "authentication failed" in page_source or "invalid password" in page_source:
            print("‚ùå Login Failed! Check password or FTP URL.")
            driver.quit()
            sys.exit("Stopping script due to FTP login failure.")

    except Exception as e:
        print(f"‚ùå Unexpected Error: {e}")
        driver.quit()
        sys.exit("Stopping script due to unexpected error in FTP login.")

    time.sleep(5)

# Function to open PAK File Path in a new tab
def access_PAK_filepath(driver, url):
    print(f"üöÄ Opening PAK File Path: {url}")

    # Open new tab in the same browser
    driver.execute_script("window.open('');")
    time.sleep(2)
    driver.switch_to.window(driver.window_handles[-1])  # Switch to new tab
    driver.get(url)  # Open the given URL

    print(f"‚úÖ Successfully opened PAK file path: {url}")

    time.sleep(5)

# Function to download PAK file
def download_PAK_file(driver, file_name):
    print(f"‚¨áÔ∏è Searching for file: {file_name}")

    try:
        # Find the file element by text
        file_element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located(
                (By.XPATH, f"//span[contains(text(), '{file_name}')]")
            )
        )

        # Select the file by modifying its class
        parent_element = file_element.find_element(By.XPATH, "./ancestor::div[contains(@class, 'file-list-item')]")
        driver.execute_script("arguments[0].classList.add('file-list-item--selected');", parent_element)

        print("‚úÖ File selected successfully.")

        # Click the Download button
        download_button = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable(
                (By.XPATH, "//button[contains(text(), 'Download')]")
            )
        )
        download_button.click()

        print("‚úÖ Download started successfully.")

    except Exception as e:
        print(f"‚ùå Error downloading file: {e}")

# Initialize Chrome WebDriver only once
driver = webdriver.Chrome(options=options)
time.sleep(5)

# Main processing loop
for index, row in df.iterrows():
    action = row["Action"]
    requirement = row["Requirement"]
    input_value = row["Inputs"]

    # Convert to string, remove spaces, and make lowercase
    action = str(action).strip().lower()
    requirement = str(requirement).strip().upper()
    input_value = str(input_value).strip()

    print(f"üîµ Checking action: '{action}', Requirement: '{requirement}', Input: '{input_value}'")

    if action == "access ftp path" and requirement == "Y" and input_value:
        print(f"üîµ Processing FTP path: {input_value}")
        access_ftp(driver, input_value)  # If fails, script stops here
        print("‚úÖ Finished executing access_ftp()")

    elif action == "access pak file path" and requirement == "Y" and input_value:
        print(f"üîµ Processing PAK File Path: {input_value}")
        access_PAK_filepath(driver, input_value)
        print("‚úÖ Finished executing access_PAK_filepath()")

    elif action == "download pak file" and requirement == "Y" and input_value:
        print(f"‚¨áÔ∏è Processing PAK File Download: {input_value}")
        download_PAK_file(driver, input_value)
        print("‚úÖ Finished executing download_PAK_file()")

print("‚úÖ All tasks completed successfully!")
driver.quit()  # Close the main browser at the end
