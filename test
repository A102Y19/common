import os
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import sys  # To stop script on login failure

# Load Excel file
file_path = "C:/PAK/PAK_Standard_requirement.xlsx"
df = pd.read_excel(file_path)

# Set Chrome options
options = webdriver.ChromeOptions()
options.add_argument("--log-level=3")

# Function to access FTP Path
def access_ftp(driver, url):
    print(f"Accessing FTP: {url}")
    driver.get(url)
    try:
        # Wait for password input field
        password_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "sharecode"))
        )
        password_input.send_keys("w5qnqhgx")  # Hardcoded password
        password_input.send_keys(Keys.RETURN)
        print("Password entered, waiting for login response...")
        time.sleep(5)
        # Check if authentication failed
        page_source = driver.page_source.lower()
        if "authentication failed" in page_source or "invalid password" in page_source:
            print("Login Failed! Check password or FTP URL.")
            driver.quit()
            sys.exit("Stopping script due to FTP login failure.")
        print("FTP Login Successful!")
    except Exception as e:
        print(f"Unexpected Error in FTP Login: {e}")
        driver.quit()
        sys.exit("Stopping script due to unexpected FTP login error.")
    time.sleep(5)

# Function to open PAK File Path in a new tab
def access_PAK_filepath(driver, url):
    print(f"Opening PAK File Path: {url}")
    driver.execute_script("window.open('');")
    time.sleep(2)
    driver.switch_to.window(driver.window_handles[-1])
    driver.get(url)
    print(f"Successfully opened PAK file path: {url}")
    time.sleep(5)

# Function to download PAK file in the same PAK File Path tab
def get_download_path():
    """Get the default downloads folder path based on OS."""
    return os.path.join(os.path.expanduser("~"), "Downloads")

def download_PAK_file(driver, file_name):
    print(f"‚¨áÔ∏è Searching for file: {file_name} to download...")

    try:
        # Step 1: Find and click the file to open preview
        file_element = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located(
                (By.XPATH, f"//span[@role='gridcell' and @aria-labelledby='genfilename' and text()='{file_name}']")
            )
        )
        driver.execute_script("arguments[0].click();", file_element)
        print(f"‚úÖ File '{file_name}' selected, opening preview...")

        # Wait for the file preview to load
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//i[contains(@class, 'fa-download')]"))
        )
        print("üîÑ File preview loaded...")

        # **Step 2: Click the actual Download button**
        download_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, f"//span[text()='{file_name}']//following::i[contains(@class, 'fa-download')][1]"))
        )
        
        # Click the download button explicitly
        driver.execute_script("arguments[0].click();", download_button)
        print(f"‚úÖ Download initiated for file: '{file_name}'")

        # Wait and confirm file is downloaded
        download_path = get_download_path()
        download_file_path = os.path.join(download_path, file_name)
        timeout = 30

        while timeout > 0:
            if os.path.exists(download_file_path):
                print(f"‚úÖ Download confirmed: '{file_name}' is in {download_path}")
                return True
            time.sleep(1)
            timeout -= 1

        print(f"‚ùå Download failed: '{file_name}' not found in {download_path} after waiting.")
        return False

    except Exception as e:
        print(f"‚ùå Error: Unable to download file '{file_name}' - {e}")
        return False

# Function to open Executable File Path in a new tab
def access_executable_filepath(driver, url):
    print(f"Opening Executable File Path: {url}")
    driver.execute_script("window.open('');")
    time.sleep(2)
    driver.switch_to.window(driver.window_handles[-1])
    driver.get(url)
    print(f"Successfully opened Executable file path: {url}")
    time.sleep(5)

# Function to download Executable file in the same Executable File Path tab
def download_executable_file(driver, file_name):
    print(f"‚¨áÔ∏è Searching for executable: {file_name} to download...")

    try:
        # Find and click on the executable file element to initiate download
        exec_element = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located(
                (By.XPATH, f"//span[@role='gridcell' and text()='{file_name}']")
            )
        )
        driver.execute_script("arguments[0].click();", exec_element)
        print(f"‚úÖ Executable '{file_name}' selected for download...")

        # Wait for the download confirmation to load (implement appropriate wait as per the app)
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//i[contains(@class, 'fa-download')]"))
        )

        # Click the actual download button
        download_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, f"//span[text()='{file_name}']//following::i[contains(@class, 'fa-download')][1]"))
        )
        driver.execute_script("arguments[0].click();", download_button)
        print(f"‚úÖ Download initiated for executable: '{file_name}'")

        # Wait and confirm file is downloaded
        download_path = get_download_path()
        download_file_path = os.path.join(download_path, file_name)
        timeout = 30

        while timeout > 0:
            if os.path.exists(download_file_path):
                print(f"‚úÖ Download confirmed: '{file_name}' is in {download_path}")
                return True
            time.sleep(1)
            timeout -= 1

        print(f"‚ùå Download failed: '{file_name}' not found in {download_path} after waiting.")
        return False

    except Exception as e:
        print(f"‚ùå Error: Unable to download executable '{file_name}' - {e}")
        return False

# Initialize Chrome WebDriver only once
driver = webdriver.Chrome(options=options)
time.sleep(5)

# Variable to track if PAK file path tab is open
pak_tab_opened = False
exec_tab_opened = False

# Main processing loop
for index, row in df.iterrows():
    action = row["Action"]
    requirement = row["Requirement"]
    input_value = row["Inputs"]

    # Convert to string, remove spaces, and make lowercase
    action = str(action).strip().lower()
    requirement = str(requirement).strip().upper()
    input_value = str(input_value).strip()

    print(f"Checking action: '{action}', Requirement: '{requirement}', Input: '{input_value}'")

    if action == "access ftp path" and requirement == "Y" and input_value:
        print(f"Processing FTP path: {input_value}")
        access_ftp(driver, input_value)
        print("Finished executing access_ftp()")

    elif action == "access pak file path" and requirement == "Y" and input_value:
        print(f"Processing PAK File Path: {input_value}")
        access_PAK_filepath(driver, input_value)
        pak_tab_opened = True
        print("Finished executing access_PAK_filepath()")

    elif action == "download pak file" and requirement == "Y" and input_value:
        print(f"Processing PAK file download: {input_value}")
        if pak_tab_opened:
            # Ensure we are in the PAK File Path tab
            driver.switch_to.window(driver.window_handles[-1])
            download_PAK_file(driver, input_value)
            print("Finished executing download_PAK_file()")
        else:
            print("Cannot download PAK file: PAK File Path tab is not open.")

    elif action == "access executable file path" and requirement == "Y" and input_value:
        print(f"Processing Executable File Path: {input_value}")
        access_executable_filepath(driver, input_value)
        exec_tab_opened = True
        print("Finished executing access_executable_filepath()")

    elif action == "download executable file" and requirement == "Y" and input_value:
        print(f"Processing Executable file download: {input_value}")
        if exec_tab_opened:
            # Ensure we are in the Executable File Path tab
            driver.switch_to.window(driver.window_handles[-1])
            download_executable_file(driver, input_value)
            print("Finished executing download_executable_file()")
        else:
            print("Cannot download Executable file: Executable File Path tab is not open.")

input("Press Enter to close")
print("All tasks completed successfully!")
# driver.quit()
