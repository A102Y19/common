import os
import shutil  # For moving files
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import sys  # To stop script on login failure

# Load Excel file
file_path = "C:/PAK/PAK_Standard_requirement.xlsx"
df = pd.read_excel(file_path)

# Set Chrome options
options = webdriver.ChromeOptions()
options.add_argument("--log-level=3")

# Function to get the default downloads folder
def get_download_path():
    return os.path.join(os.path.expanduser("~"), "Downloads")

# Function to access FTP Path
def access_ftp(driver, url):
    print(f"Accessing FTP: {url}")
    driver.get(url)
    try:
        password_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "sharecode"))
        )
        password_input.send_keys("w5qnqhgx")  # Hardcoded password
        password_input.send_keys(Keys.RETURN)
        print("Password entered, waiting for login response...")
        time.sleep(5)

        # Check if authentication failed
        page_source = driver.page_source.lower()
        if "authentication failed" in page_source or "invalid password" in page_source:
            print("Login Failed! Check password or FTP URL.")
            driver.quit()
            sys.exit("Stopping script due to FTP login failure.")

        print("FTP Login Successful!")
    except Exception as e:
        print(f"Unexpected Error in FTP Login: {e}")
        driver.quit()
        sys.exit("Stopping script due to unexpected FTP login error.")
    time.sleep(5)

# Function to open PAK File Path
def access_PAK_filepath(driver, url):
    print(f"Opening PAK File Path: {url}")
    driver.execute_script("window.open('');")
    time.sleep(2)
    driver.switch_to.window(driver.window_handles[-1])
    driver.get(url)
    print("Successfully opened PAK file path.")
    time.sleep(5)

# Function to download PAK file
def download_PAK_file(driver, file_name):
    print(f"⬇️ Searching for file: {file_name} to download...")

    try:
        file_element = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located(
                (By.XPATH, f"//span[@role='gridcell' and @aria-labelledby='genfilename' and text()='{file_name}']")  
            )
        )
        driver.execute_script("arguments[0].click();", file_element)
        print(f"✅ File '{file_name}' selected, opening preview...")

        # Wait for the file preview to load
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//i[contains(@class, 'fa-download')]"))
        )

        # Click the actual Download button
        download_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, f"//span[text()='{file_name}']//following::i[contains(@class, 'fa-download')][1]"))
        )
        driver.execute_script("arguments[0].click();", download_button)
        print(f"✅ Download initiated for file: '{file_name}'")

        # Wait and confirm file is downloaded
        download_path = get_download_path()
        download_file_path = os.path.join(download_path, file_name)
        timeout = 30

        while timeout > 0:
            if os.path.exists(download_file_path):
                print(f"✅ Download confirmed: '{file_name}' is in {download_path}")
                return True
            time.sleep(1)
            timeout -= 1

        print(f"❌ Download failed: '{file_name}' not found in {download_path} after waiting.")
        return False

    except Exception as e:
        print(f"❌ Error: Unable to download file '{file_name}' - {e}")
        return False

# Function to transfer the downloaded PAK file to a target folder
def transfer_PAK_file(file_name, target_path):
    """Move the downloaded file to a specific target folder."""
    download_path = get_download_path()  # Source (Downloads)
    source_file = os.path.join(download_path, file_name)  # Full source path
    destination_file = os.path.join(target_path, file_name)  # Full target path

    try:
        if os.path.exists(source_file):
            shutil.move(source_file, destination_file)  # Move file
            print(f"✅ File moved successfully to: {destination_file}")
            return True
        else:
            print(f"❌ File move failed: '{file_name}' not found in {download_path}")
            return False
    except Exception as e:
        print(f"❌ Error moving file '{file_name}': {e}")
        return False

# Initialize Chrome WebDriver only once
driver = webdriver.Chrome(options=options)
time.sleep(5)

# Variable to track open tabs
pak_tab_opened = False

# Main processing loop
for index, row in df.iterrows():
    action = str(row["Action"]).strip().lower()
    requirement = str(row["Requirement"]).strip().upper()
    input_value = str(row["Inputs"]).strip()

    print(f"Checking action: '{action}', Requirement: '{requirement}', Input: '{input_value}'")

    if action == "access ftp path" and requirement == "Y" and input_value:
        print(f"Processing FTP path: {input_value}")
        access_ftp(driver, input_value)

    elif action == "access pak file path" and requirement == "Y" and input_value:
        print(f"Processing PAK File Path: {input_value}")
        access_PAK_filepath(driver, input_value)
        pak_tab_opened = True

    elif action == "download pak file" and requirement == "Y" and input_value:
        print(f"Processing PAK file download: {input_value}")
        if pak_tab_opened:
            driver.switch_to.window(driver.window_handles[-1])
            download_success = download_PAK_file(driver, input_value)
            if download_success:
                print(f"✅ File '{input_value}' downloaded successfully.")
            else:
                print(f"❌ Download failed for '{input_value}'.")
        else:
            print("Cannot download PAK file: PAK File Path tab is not open.")

    elif action == "transfer pak file" and requirement == "Y" and input_value:
        print(f"Processing file transfer: {input_value}")
        
        try:
            file_name, target_path = input_value.split(";")  # Split filename & target path
            file_name = file_name.strip()
            target_path = target_path.strip()

            if os.path.exists(target_path):
                transfer_success = transfer_PAK_file(file_name, target_path)
                if transfer_success:
                    print(f"✅ File '{file_name}' transferred successfully.")
                else:
                    print(f"❌ Transfer failed for '{file_name}'.")
            else:
                print(f"❌ Target path '{target_path}' does not exist. Please check and create the folder.")

        except ValueError:
            print("❌ Invalid input format. Expected format: 'filename;target_path'")

input("Press Enter to close")
print("All tasks completed successfully!")
# driver.quit()
