def wait_for_update_installer_and_information():
    logging.info("Searching inside OMP for 'Update Installer'...")

    omp_window = None
    while omp_window is None:
        try:
            windows = Desktop(backend="uia").windows()
            for win in windows:
                logging.info(f"Window found: {win.window_text()}")
                if "OMP Data Change Manager" in win.window_text():
                    omp_window = win
                    logging.info("OMP Main window found.")
                    break
        except Exception as e:
            logging.error(f"Error finding main window: {e}")
        time.sleep(5)

    while True:
        all_panes = omp_window.descendants()
        for pane in all_panes:
            logging.info(f"Checking pane: {pane.window_text()}")
            if "Update Installer" in pane.window_text():
                logging.info(f"Found 'Update Installer' pane: {pane.window_text()}")
                break
        else:
            time.sleep(10)
            continue
        break

    logging.info("Waiting for 'Information' pane every 60 seconds...")
    while True:
        all_panes = omp_window.descendants()
        for pane in all_panes:
            if "Information" in pane.window_text():
                logging.info(f"Found 'Information' pane: {pane.window_text()}")
                logging.info("Skipping text read. Sending ENTER to close popup.")
                pyautogui.press('enter')
                logging.info("Checking if Notepad is open after ENTER...")

                notepad_window = None
                start_time = time.time()
                timeout = 60  # Define timeout here

                while notepad_window is None and (time.time() - start_time < timeout):
                    try:
                        windows = Desktop(backend="uia").windows()
                        for win in windows:
                            if "Notepad" in win.window_text():
                                notepad_window = win
                                logging.info("Notepad window found.")
                                handle_notepad_if_opened(notepad_window)
                                return
                    except Exception as e:
                        logging.error(f"Error finding Notepad: {e}")
                    time.sleep(5)

                logging.info("Installation Completed Successfully.")
                time.sleep(60)
                return
        time.sleep(60)

if __name__ == "__main__":
    wait_for_update_installer_and_information()
