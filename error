import os
from datetime import datetime

def handle_notepad_errors_from_opened_window(timeout=60, save_file=True):
    print("🔍 Checking if Notepad is open after ENTER...")
    notepad_window = None
    start_time = time.time()

    while notepad_window is None and (time.time() - start_time < timeout):
        try:
            windows = Desktop(backend="win32").windows()
            for win in windows:
                if "Notepad" in win.window_text():
                    print("✅ Notepad window found.")
                    notepad_window = win
                    break
        except Exception as e:
            print(f"Error finding Notepad: {e}")
        time.sleep(3)

    if notepad_window is None:
        print("❌ Notepad not found.")
        return

    try:
        notepad_window.set_focus()
        time.sleep(1)

        # Select all and copy
        pyautogui.hotkey('ctrl', 'a')
        time.sleep(0.5)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(1)

        # Read from clipboard
        import pyperclip
        text = pyperclip.paste()

        if not text.strip():
            print("⚠️ Copied text is empty.")
        else:
            print("📋 Copied text from Notepad:\n" + "-" * 40)
            print(text)
            print("-" * 40)

            if save_file:
                timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
                folder_path = r'C:\log'
                os.makedirs(folder_path, exist_ok=True)
                file_path = os.path.join(folder_path, f'Failed_Logs_{timestamp}.txt')

                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(text)

                print(f"✅ Text saved to: {file_path}")

        # Close Notepad
        notepad_window.close()
        print("✅ Notepad closed.")

    except Exception as e:
        print(f"❌ Error handling Notepad: {e}")
