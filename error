from pywinauto import Desktop
import time
import pyautogui
import pyperclip
import subprocess
import os

def wait_for_update_installer_and_information():
    print("üîç Searching inside OMP for 'Update Installer'...")

    omp_window = None
    while omp_window is None:
        try:
            windows = Desktop(backend="uia").windows()
            for win in windows:
                if "OMP Data Change Manager" in win.window_text():
                    omp_window = win
                    print("‚úÖ OMP Main window found.")
                    break
        except Exception as e:
            print(f"Error finding main window: {e}")
        time.sleep(5)

    while True:
        all_panes = omp_window.descendants(control_type="Pane")
        for pane in all_panes:
            if "Update Installer" in pane.window_text():
                print(f"‚úÖ Found 'Update Installer' pane: {pane.window_text()}")
                break
        else:
            time.sleep(10)
            continue
        break

    print("üïí Waiting for 'Information' pane every 60 seconds...")
    while True:
        all_panes = omp_window.descendants(control_type="Pane")
        for pane in all_panes:
            if "Information" in pane.window_text():
                print(f"‚úÖ Found 'Information' pane: {pane.window_text()}")
                print("üí° Skipping text read. Sending ENTER to close popup.")
                pyautogui.press('enter')
                print("üîç Checking if Notepad is open after ENTER...")
				notepad_window = None
				start_time = time.time()
                
				while notepad_window is None and (time.time() - start_time < timeout):
					try:
						windows = Desktop(backend="uia").windows()
						for win in windows:
							if "Notepad" in win.window_text():
								notepad_window = win
								print("‚úÖ Notepad window found.")
								handle_notepad_if_opened()
					except Exception as e:
						print(f"Error finding Notepad: {e}")
					time.sleep(5)

				if notepad_window is None:
					print("‚úÖ No Notepad opened.")
					return
		
                handle_notepad_if_opened()
                return
        time.sleep(60)

def handle_notepad_if_opened(timeout=60):

    # Bring Notepad to front and copy text
    try:
        notepad_window.set_focus()
        time.sleep(1)
        pyautogui.hotkey("ctrl", "a")
        time.sleep(0.5)
        pyautogui.hotkey("ctrl", "c")
        time.sleep(1)
        copied_text = pyperclip.paste()

        # Open a new Notepad
        subprocess.Popen(["notepad.exe"])
        time.sleep(2)
        pyautogui.hotkey("ctrl", "v")
        time.sleep(1)

        # Save file in C:\log as failed_logs.txt
        os.makedirs(r"C:\log", exist_ok=True)
        pyautogui.hotkey("ctrl", "s")
        time.sleep(1)
        pyautogui.write(r"C:\log\failed_logs.txt")
        pyautogui.press("enter")
        time.sleep(1)

        print("‚úÖ Logs copied and saved to C:\\log\\failed_logs.txt")


        # Close original Notepad
        notepad_window.close()
        print("‚úÖ Closed original Notepad.")

    except Exception as e:
        print(f"‚ùå Error during Notepad copy/save: {e}")


if __name__ == "__main__":
    wait_for_update_installer_and_information()
