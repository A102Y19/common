import os
import sys
import time
import logging
import subprocess
import pyautogui
import pyperclip
import pygetwindow as gw
import pandas as pd
import win32gui
import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from pywinauto import Application, findwindows
from pywinauto.keyboard import send_keys
from dotenv import load_dotenv
from pywinauto import Desktop

# Get password from environment variable
#password = os.getenv("OMP_pass")
#if not password:
#    logging.error("Error: Environment variable 'OMP_pass' not found!")
#    sys.exit(1)

log_filename = r"\\awsusdmjfsxn01.jnj.com\eth_get_dev_omp\OMP_JNJ_MD_OMEGA_LAB\OMPartners\development\dispatcher\bin\Automation\log\log_" + time.strftime("%Y-%m-%d_%H-%M-%S") + ".txt"
dbpass = os.getenv('db_key')
timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_filename),
        logging.StreamHandler()
    ]
)

def count_cmd_windows():
    try:
        return len([
            w for w in findwindows.find_windows()
            if "cmd.exe" in win32gui.GetWindowText(w).lower() or
            "command prompt" in win32gui.GetWindowText(w).lower()
        ])
    except exception as e:
        logging.error(f"Error counting CMD windows: {e}")
        return 0


def launch_cmd_as_admin_and_run(commands):


    # Step 1: Open Run dialog
    pyautogui.hotkey('win', 'r')
    time.sleep(1)

    # Step 2: Type cmd
    pyautogui.write("cmd", interval=0.1)
    pyautogui.press('enter')

    # If needed: pyautogui.press('tab', presses=2); pyautogui.press('enter')
    time.sleep(5)
    logging.info("CMD launch successfully")
    logging.info("Executing SQL commands")
    # Step 5: Paste and run each command
    for command in commands:
        pyperclip.copy(command)
        pyautogui.hotkey('ctrl', 'v')
        pyautogui.press('enter')
        time.sleep(4)

    logging.info(" All commands executed successfully.")

# Credentials and SQL commands
dbuser = "PAKDB_USER"

sql_login = f'sqlplus {dbuser}/"{dbpass}"@DNV91001'
timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
LOGDIR = rf"\\awsusdmjfsxn01.jnj.com\eth_get_dev_omp\OMP_JNJ_MD_OMEGA_LAB\OMPartners\development\dispatcher\bin\Automation\log\sql_output_{timestamp}.txt"


commands_to_run = [
    "echo Running SQL Scripts",
    sql_login,
    "ALTER SESSION SET NLS_DATE_FORMAT='DD/MM/YYYY HH24:MI:SS';",
    "SET HEADING OFF",
    "SET FEEDBACK OFF",
    "SET PAGES 0",
    f'SPOOL  {LOGDIR}',
    "SELECT SYSDATE FROM DUAL;",
    "SELECT MAX(SEQUENCE#) AS LAST_GENERATED_SEQUENCE FROM V$ARCHIVED_LOG;",
    "set serveroutput on",
    "exec pakuser_switch_logfile;",
    "exec pakuser_switch_logfile;",
    "exec pakuser_switch_logfile;",
    "SELECT MAX(SEQUENCE#) AS LAST_GENERATED_SEQUENCE FROM V$ARCHIVED_LOG;",
    "SELECT SYSDATE FROM DUAL;",
    "select count(1) from v$session where username like 'OMP_JNJ_MD_OMEGA_LAB_%';",
    "set lines 200",
    "col username for a30",
    "col osuser for a30",
    "col machine for a30",
    "select username,osuser,machine,count(*) from v$session where username like 'OMP_JNJ_MD_OMEGA_LAB_%' group by username,osuser,machine order by username,osuser,machine;",
    "SPOOL OFF",
    "set pages 0",
    "set heading off",
    "set feedback off",
    r"SPOOL \\awsusdmjfsxn01.jnj.com\\eth_get_dev_omp\\OMP_JNJ_MD_OMEGA_LAB\\OMPartners\\development\\dispatcher\\bin\Automation\\log\\servers.txt",
    "select distinct machine from v$session where username like 'OMP_JNJ_MD_OMEGA_LAB_%';",
    "SPOOL OFF",
    "EXIT",
    "exit"
]


def copy_server_list():

    # Launch and run
    launch_cmd_as_admin_and_run(commands_to_run)
    logging.info("collecting active users server list")
    # Copying Server List from log
    pyautogui.keyDown('win')
    time.sleep(0.2)
    pyautogui.press('r')
    pyautogui.keyUp('win')
    time.sleep(1)
    pyperclip.copy(rf"\\awsusdmjfsxn01.jnj.com\eth_get_dev_omp\OMP_JNJ_MD_OMEGA_LAB\OMPartners\development\dispatcher\bin\Automation\log\servers.txt")
    pyautogui.keyDown('ctrl')
    time.sleep(0.2)
    pyautogui.press('v')
    time.sleep(0.1)
    pyautogui.keyUp('ctrl')
    pyautogui.press('enter')
    time.sleep(3)
    pyautogui.keyDown('ctrl')
    time.sleep(0.2)
    pyautogui.press('a')
    time.sleep(0.2)
    pyautogui.press('c')
    time.sleep(0.2)
    pyautogui.keyUp('ctrl')
    
    servers = pyperclip.paste()
    server_list = [line.strip().split('\\')[1] for line in servers.splitlines() if line.startswith('JNJ') and 'AWSDMKNVAW0002' not in line]
    
    with open(rf'\\awsusdmjfsxn01.jnj.com\eth_get_dev_omp\OMP_JNJ_MD_OMEGA_LAB\OMPartners\development\dispatcher\bin\Automation\log\userlist_servers.txt','w') as file:
        for serv in server_list:
            file.write(f"{serv}\n")
    logging.info("Servers List collected and saved in userlist_server file")
    
    time.sleep(3)
    os.system("taskkill /f /im notepad.exe")




def launching_OMP():
    script_path = r"\\awsusdmjfsxn01.jnj.com\eth_get_dev_omp\OMP_JNJ_MD_OMEGA_LAB\OMPartners\development\bin\OMPartners_menu.cmd"  # Replace with actual script name

    try:
        if os.path.exists(script_path):
            # Try launching the script
            logging.info(f"Launching OMP application from: {script_path}")
            subprocess.Popen(script_path, shell=True)
            
            logging.info("OMP application launch Initiated.")
            time.sleep(20)
        
            

            # Check if OMP Plus is already running
            omp_app = None
            for _ in range(5):
                try:
                    windows = findwindows.find_windows(title_re=".*OMP Plus.*", backend='win32')
                    if windows:
                        omp_app = Application().connect(handle=windows[0])
                        logging.info("OMP Plus application detected.")
                        break
                except Exception as e:
                    logging.info("OMP Plus not running yet, retrying...")
                time.sleep(10)

            if not omp_app:
                logging.error("OMP Plus did not launch!")
                exit(1)

            return omp_app

    except Exception as e:
        logging.error(f"Unexpected error: {e}")

def stop_dispatcher(omp_app, dispatcher_path):
    try:
        omp_window = omp_app.top_window()
        omp_window.set_focus()
        time.sleep(1)

        logging.info("Sending Alt + U...")
        omp_window.type_keys('%u')
        time.sleep(2)
        logging.info("Sending W...")
        omp_window.type_keys('W')
        time.sleep(2)
        logging.info("Sending C...")
        omp_window.type_keys('C')
        time.sleep(2)
        logging.info("Sending C...")
        omp_window.type_keys('C')
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        time.sleep(10)

        # Check if CMD opened
        logging.info("Checking for CMD window...")
        cmd_found = False
        for _ in range(5):
            try:
                windows = findwindows.find_windows(title_re=".*Command Prompt.*", backend='win32')
                if windows:
                    logging.info("Command Prompt window found.")
                    cmd_found = True
                    break
            except Exception:
                pass
            time.sleep(5)

        if not cmd_found:
            logging.error("Command Prompt window not found. Exiting.")
            sys.exit(1)

        # Send pushd <dispatcher_path> and execute stop command
        logging.info(f"Sending pushd command to path: {dispatcher_path}")
        send_keys(f'pushd {dispatcher_path}')
        send_keys('{ENTER}')
        time.sleep(2)
        logging.info("Sending stop command...")
        send_keys(r'DispatcherManagementAction.cmd{SPACE}stop{SPACE}/all')
        send_keys('{ENTER}')
        logging.info("Dispatcher stop command sent.")
        time.sleep(30)

        send_keys("^a")
        time.sleep(1)
        send_keys("^c")
        time.sleep(1)
        output = pyperclip.paste()
        logging.info("captured CMD output")

        success_keywords = [
            "success"
        ]
        if any(keyword in output.lower() for keyword in success_keywords):
            logging.info("Dispatcher stopped successfully")

        else:
            logging.info("Dispatcher stop failed, Terminating script")
            logging.error("Dispatcer stop failed!")
            sys.exit(1)
            
    except Exception as e:
        logging.error(f"Error in stop_dispatcher: {e}")
    
    finally:
        logging.info("closing CMD window")
        try:
            send_keys('exit')
            send_keys('{ENTER}')
            logging.info(f"CMD closed successfully")
            time.sleep(10)
        except Exception as e:
            logging.warning(f"Failed to close CMD: {e}")

def base_solution_build(omp_app):
    try:
        omp_window = omp_app.top_window()
        omp_window.set_focus()
        time.sleep(1)

        logging.info("Sending Alt + U...")
        omp_window.type_keys('%u')
        time.sleep(2)
        logging.info("Sending C...")
        omp_window.type_keys('C')
        time.sleep(2)
        logging.info("Sending U...")
        omp_window.type_keys('U')
        time.sleep(2)
        logging.info("Sending LEFT...")
        send_keys("{LEFT}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 2}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 2}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        logging.info("Initiated Installing Base solution Build.")
        time.sleep(30)

        logging.info("Checking for new Command Prompt window...")
        window_found = False
        for _ in range(6):
            current_cmd_count = count_cmd_windows()
            logging.info(f" current count: {current_cmd_count}")
            
            if current_cmd_count > initial_cmd_count:
                logging.info(f"New Command Prompt window detected. Initial: {initial_cmd_count}, current: {current_cmd_count}")
                window_found = True
                break
            else:
                logging.info("Waiting for CMD window...")
            time.sleep(5)

        if not window_found:
            logging.error("New Command Prompt window not detected after Base build. Exiting...")
            sys.exit(1)


    except Exception as e:
        logging.error(f"Error during Base Solution Build: {e}")

def industry_solution_build(omp_app):
    try:
        omp_window = omp_app.top_window()
        omp_window.set_focus()
        time.sleep(1)

        logging.info("Sending Alt + U...")
        omp_window.type_keys('%u')
        time.sleep(2)
        logging.info("Sending C...")
        omp_window.type_keys('C')
        time.sleep(2)
        logging.info("Sending U...")
        omp_window.type_keys('U')
        time.sleep(2)
        logging.info("Sending LEFT...")
        send_keys("{LEFT}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 2}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 3}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        logging.info("Initiated Installing Industry solution Build.")
        time.sleep(10)

        logging.info("Checking for new Command Prompt window...")
        window_found = False
        for _ in range(6):
            current_cmd_count = count_cmd_windows()
            logging.info(f" current count: {current_cmd_count}")
            
            if current_cmd_count > initial_cmd_count:
                logging.info(f"New Command Prompt window detected. Initial: {initial_cmd_count}, current: {current_cmd_count}")
                window_found = True
                break
            else:
                logging.info("Waiting for CMD window...")
            time.sleep(5)

        if not window_found:
            logging.error("New Command Prompt window not detected after industry build. Exiting...")
            sys.exit(1)


    except Exception as e:
        logging.error(f"Error during industry Solution Build: {e}")


def proejct_solution_build(omp_app):
    try:

        initial_cmd_count = count_cmd_windows()
        logging.info(f"count: {initial_cmd_count}")
        omp_window = omp_app.top_window()
        omp_window.set_focus()
        time.sleep(1)

        logging.info("Sending Alt + U...")
        omp_window.type_keys('%u')
        time.sleep(2)
        logging.info("Sending C...")
        omp_window.type_keys('C')
        time.sleep(2)
        logging.info("Sending U...")
        omp_window.type_keys('U')
        time.sleep(2)
        logging.info("Sending LEFT...")
        send_keys("{LEFT}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 2}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 4}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        logging.info("Initiated Installing project solution Build.")
        time.sleep(30)

        logging.info("Checking for new Command Prompt window...")
        window_found = False
        for _ in range(6):
            current_cmd_count = count_cmd_windows()
            logging.info(f" current count: {current_cmd_count}")
            
            if current_cmd_count > initial_cmd_count:
                logging.info(f"New Command Prompt window detected. Initial: {initial_cmd_count}, current: {current_cmd_count}")
                window_found = True
                break
            else:
                logging.info("Waiting for CMD window...")
            time.sleep(5)

        if not window_found:
            logging.error("New Command Prompt window not detected after project build. Exiting...")
            sys.exit(1)


    except Exception as e:
        logging.error(f"Error during project Solution Build: {e}")

def select_build_option():
    try:
        time.sleep(5)
        logging.info("Sending build option...")
        send_keys("2")
        time.sleep(2)
        send_keys("{ENTER}")
        logging.info("Build option 1 selected successfully.")

        logging.info("Waiting for OMP Data Change Manager to launch...")
        time.sleep(30)

        # Check if 'OMP Data Change Manager' window opened
        window_found = False
        for _ in range(3):  # Retry a few times
            try:
                windows = findwindows.find_windows(title_re=".*OMP Data Change Manager.*", backend='win32')
                if windows:
                    logging.info("OMP Data Change Manager window detected.")
                    window_found = True
                    break
                    time.sleep(20)
            except Exception:
                logging.info("Waiting for window...")
            time.sleep(10)

        if not window_found:
            logging.error("OMP Data Change Manager did not open. Exiting...")
            sys.exit(1)

    except Exception as e:
        logging.error(f"Error while selecting build option: {e}")

def schema_pass():
    load_dotenv(r"\\awsusdmjfsxn01.jnj.com\eth_get_dev_omp\OMP_JNJ_MD_OMEGA_LAB\OMPartners\development\dispatcher\bin\Automation\.env")
    
    schema_keys = [
        "OMP_JNJ_MD_OMEGA_LAB_OPR",
        "OMP_JNJ_MD_OMEGA_LAB_SOP",
        "OMP_JNJ_MD_OMEGA_LAB_FCT",
        "OMP_JNJ_MD_OMEGA_LAB_UTL"
    ]

    for key in schema_keys:
        schema_password = os.getenv(key)
        if not schema_password:
            logging.info(f"password not found for {key}")
            continue

        time.sleep(10)
        pyautogui.write(schema_password)
        time.sleep(2)
        pyautogui.press("enter")
        logging.info(f"Enterd password for {key}")
    
    time.sleep(15)
    logging.info("Sending UP...")
    send_keys("{UP 2}")
    time.sleep(2)
    logging.info("Sending ENTER...")
    send_keys("{ENTER}")
    time.sleep(2)
    logging.info("sending TAB")
    send_keys("{TAB}")
    time.sleep(2)
    logging.info("Sending ENTER...")
    send_keys("{ENTER}")
    time.sleep(10)

def wait_for_update_installer_and_information():
    logging.info("Searching for 'OMP Data Change Manager' window...")

    omp_window = None
    while omp_window is None:
        try:
            windows = Desktop(backend="uia").windows()
            for win in windows:
                title = win.window_text()
                logging.info(f"Window found: {title}")
                if "OMP Data Change Manager" in title:
                    omp_window = win
                    logging.info("OMP main window found.")
                    break
        except Exception as e:
            logging.error(f"Error finding OMP window: {e}")
        time.sleep(5)

    # Wait for 'Update Installer' to appear
    logging.info("Looking for 'Update Installer' in OMP window...")
    update_installer_found = False
    attempts = 0
    max_attempts = 4
    while not update_installer_found and attempts < max_attempts:
        try:
            panes = omp_window.descendants()
            for pane in panes:
                try:
                    name = pane.element_info.name
                    text = pane.window_text()
                    if "Update Installer" in name or "Update Installer" in text:
                        logging.info(f"'Update Installer' found: {name}")
                        update_installer_found = True
                        break
                except Exception as pane_error:
                    logging.warning(f"Pane info fetch failed: {pane_error}")
        except Exception as e:
            logging.error(f"Error during Update Installer search: {e}")

        if not update_installer_found:
            attempts += 1
            logging.info("Update Installer not found yet. Retrying in 10 seconds..(Attempt {attempts}/{max_attempts})")
            time.sleep(10)
    if not update_installer_found:
        logging.info("Update Installer not found after maximum attempts. Proceeding with the next steps.")

    # Wait for 'Information' popup and handle it
    logging.info("Waiting for 'Information' popup every 60 seconds...")
    while True:
        try:
            panes = omp_window.descendants()
            for pane in panes:
                try:
                    name = pane.element_info.name
                    text = pane.window_text()
                    if "Information" in name or "Information" in text:
                        logging.info(f"'Information' popup found: {text}")
                        pyautogui.press('enter')
                        logging.info("ENTER sent to close popup.")

                        # Check for Notepad after ENTER
                        notepad_found = False
                        start_time = time.time()
                        timeout = 60

                        while time.time() - start_time < timeout:
                            windows = Desktop(backend="uia").windows()
                            for win in windows:
                                if "Notepad" in win.window_text():
                                    logging.info("Notepad window found.")
                                    notepad_found = True
                                    handle_notepad_if_opened(win)
                                    break
                            if notepad_found:
                                break
                            time.sleep(5)
                            
                        if not notepad_found:
                            logging.info("Installation completed. No Notepad found.")
                            time.sleep(60)
                        return
                except Exception as info_error:
                    logging.warning(f"Error checking Information pane: {info_error}")
                    sys.exit("Exiting script due to error in checking Information pane.")
        except Exception as e:
            logging.error(f"Error while checking for Information popup: {e}")
            sys.exit("Exiting script due to error while checking Information popup.")
        time.sleep(60)

def handle_notepad_if_opened(notepad_window):
    try:
        notepad_window.set_focus()
        time.sleep(1)
        pyautogui.hotkey("ctrl", "a")
        time.sleep(1)
        pyautogui.hotkey("ctrl", "c")
        time.sleep(1)
        copied_text = pyperclip.paste()

        # Open a new Notepad
        subprocess.Popen(["notepad.exe"])
        time.sleep(2)
        pyautogui.hotkey("ctrl", "v")
        time.sleep(2)

        # Save file in log as failed_logs.txt
        os.makedirs(r"\\awsusdmjfsxn01.jnj.com\eth_get_dev_omp\OMP_JNJ_MD_OMEGA_LAB\OMPartners\development\dispatcher\bin\Automation\log", exist_ok=True)
        pyautogui.hotkey("ctrl", "s")
        time.sleep(2)
        pyautogui.write(r"\\awsusdmjfsxn01.jnj.com\eth_get_dev_omp\OMP_JNJ_MD_OMEGA_LAB\OMPartners\development\dispatcher\bin\Automation\log\failed_logs_{timestamp}.txt")
        time.sleep(2)
        pyautogui.press("enter")
        time.sleep(2)

        logging.info(r" Installation gets failed Logs copied and saved to \\awsusdmjfsxn01.jnj.com\eth_get_dev_omp\OMP_JNJ_MD_OMEGA_LAB\OMPartners\development\dispatcher\bin\Automation\log\failed_logs.txt")

        # Close original Notepad
        notepad_window.close()
        logging.info(" Closed original Notepad.")
        sys.exit()

    except Exception as e:
        logging.error(f" Error during Notepad copy/save: {e}")    

#validate Version details
def validate_version_details(file_path, expected_version):
    try:
        if not os.path.exists(file_path):
            logging.error(f"[ERROR] File not found: {file_path}")
            sys.exit(1)

        with open(file_path, 'r') as f:
            content = f.read()

        if expected_version in content:
            logging.info(f"[SUCCESS] Version '{expected_version}' found in {file_path}")
        else:
            logging.info(f"[ERROR] Version '{expected_version}' NOT found in {file_path}")
            sys.exit(1)

    except Exception as e:
        logging.info(f"[EXCEPTION] Failed to validate version details: {str(e)}")    
        sys.exit(1)

def main_launcher():
    excel_file = r"\\awsusdmjfsxn01.jnj.com\eth_get_dev_omp\OMP_JNJ_MD_OMEGA_LAB\OMPartners\development\dispatcher\bin\Automation\PAK_Standard_requirement.xlsx"
    try:
        df = pd.read_excel(excel_file, sheet_name=1)
    except Exception as e:
        logging.info(f"Failed to load Excel: {e}")
        return

    omp_app = None
    result = None

    for index, row in df.iterrows():
        action = str(row.iloc[0]).strip().lower()
        requirement = str(row.iloc[1]).strip().upper()
        inputs = str(row["Inputs"]).strip()

        #print(f"Action: '{action}', Requirement: '{requirement}'")

        if requirement == "Y":
            if "launch omp" in action:
                omp_app = launching_OMP()
            elif "stop dispatcher" in action:
                logging.info("Executing stop dispatcher")
                if omp_app:
                    dispatcher_path = str(row.iloc[2]).strip()
                    stop_dispatcher(omp_app, dispatcher_path)  
            elif "base build" in action:
                if omp_app:
                    base_solution_build(omp_app)
            elif "project build" in action:
                if omp_app:
                    proejct_solution_build(omp_app)
            elif "industry build" in action:
                if omp_app:
                    industry_solution_build(omp_app)
            elif "select build" in action:
                select_build_option()
            elif "schema pass" in action:
                schema_pass()
                wait_for_update_installer_and_information()

                if result == True:
                    logging.info("Schema execution SUCCESS ")
                elif result == False:
                    logging.info("Schema execution FAILED ")
                else:
                    logging.info("Schema execution STATUS UNKNOWN ")

            elif "validate version details" in action:
                path, version = map(str.strip, inputs.split(','))
                validate_version_details(path, version)

            
                 

                
            else:
                logging.info(f"Unknown action '{action}', skipping...")
        else:
            logging.info(f"Skipping '{action}' as requirement is N")


if __name__ == "__main__":
    copy_server_list()
    main_launcher()
    
