import pyautogui
from pyautogui import getWindowsWithTitle
import pyperclip
import time
import subprocess
import re
import os
import pandas as pd

#######################################################################################################
# DO NOT CLICK ANYWHERE UNTIL THE SCRIPT RUNS AND RETURNS TO THIS WINDOW AFTER COMPLETING ALL SERVERS #
#######################################################################################################

# Handle CSV file for list of Servers
dir = r'\\awsusdmlfsxn01.jnj.com\opt_pdev3_omp_na\OMP_JNJ_CMD_OPTMS_LAB\OMPartners\development\dispatcher\bin\Automation\PAK\log'
with open(dir + r'\userlist_servers.txt', 'r') as file:
    server_list = [line.strip() for line in file]

server_list = ["AWSDMLNVAW0001"]  # For testing with one server

count = 0
failed_list = []
username = r"JNJ\SA-ITS-APSOTINT-LAB"
password = os.getenv('OMP_key')

for server in server_list:
    print(f'Current Server: {server}')

    # Configurations
    machineName = server  # Replace with actual server name
    rdp_file = "rdp_conn.rdp"

    # Store Credentials for RDP Auto Connect
    store_cred = f'cmdkey /generic:TERMSRV/{machineName} /user:{username} /pass:{password}'
    subprocess.run(store_cred, shell=True)
    time.sleep(2)

    # Create RDP File for Session
    with open(rdp_file, "w", encoding="utf-16") as f:
        f.write(f'''screen mode id:i:2
    use multimon:i:0
    desktopwidth:i:1280
    desktopheight:i:720
    session bpp:i:32
    winposstr:s:0,3,0,0,800,600
    compression:i:1
    keyboardhook:i:2
    audiocapturemode:i:0
    videoplaybackmode:i:1
    connection type:i:7
    networkautodetect:i:1
    bandwidthautodetect:i:1
    displayconnectionbar:i:1
    enableworkspacereconnect:i:0
    disable wallpaper:i:0
    allow font smoothing:i:0
    allow desktop composition:i:0
    disable full window drag:i:1
    disable menu anims:i:1
    disable themes:i:0
    disable cursor setting:i:0
    bitmapcachepersistenable:i:1
    full address:s:{machineName}
    audiomode:i:0
    redirectprinters:i:1
    redirectlocation:i:0
    redirectcomports:i:0
    redirectsmartcards:i:1
    redirectwebauthn:i:1
    redirectclipboard:i:1
    redirectposdevices:i:0
    autoreconnection enabled:i:1
    authentication level:i:2
    prompt for credentials:i:0
    negotiate security layer:i:1
    remoteapplicationmode:i:0
    alternate shell:s:
    shell working directory:s:
    gatewayhostname:s:
    gatewayusagemethod:i:4
    gatewaycredentialssource:i:4
    gatewayprofileusagemethod:i:0
    promptcredentialonce:i:0
    gatewaybrokeringtype:i:0
    use redirection server name:i:0
    rdgiskdcproxy:i:0
    kdcproxyname:s:
    enablerdsaadauth:i:0
    ''')

    # Call Remote Desktop Connection
    subprocess.Popen(["mstsc.exe", "/admin", rdp_file])
    print("Launching RDP session...")
    time.sleep(8)

    # Handle Confirmation Dialog
    pyautogui.press('tab', presses=2, interval=0.2)
    pyautogui.press('enter')
    time.sleep(15)

    # Wait for RDP to Load
    max_wait = 30
    start = time.time()
    while True:
        windows = getWindowsWithTitle(machineName)
        if windows:
            # Handle Information Warning of the Server
            pyautogui.press('enter')
            time.sleep(20)

            # Go Inside the RDP Window
            pyautogui.moveTo(800, 400)
            pyautogui.click()

            # Run Command Prompt as Admin
            pyautogui.keyDown('win')
            time.sleep(0.2)
            pyautogui.press('r')
            pyautogui.keyUp('win')
            time.sleep(1)
            pyautogui.write("cmd", interval=0.1)
            pyautogui.keyDown('ctrl')
            time.sleep(0.2)
            pyautogui.keyDown('shift')
            time.sleep(0.2)
            pyautogui.press('enter')
            pyautogui.keyUp('ctrl')
            pyautogui.keyUp('shift')
            time.sleep(3)

            # Handle Confirmation for CMD Dialog
            pyautogui.press('tab', presses=2, interval=0.2)
            pyautogui.press('enter')
            time.sleep(4)

            # Run the command to find LAB related processes
            session_cmd = 'wmic process where "name like \'%event%\'" get processId,CommandLine | findstr /I "LAB"'
            pyperclip.copy(session_cmd)
            pyautogui.keyDown('ctrl')
            time.sleep(0.2)
            pyautogui.press('v')
            time.sleep(0.1)
            pyautogui.keyUp('ctrl')
            pyautogui.press('enter')
            time.sleep(4)

            # Copy the Session Data
            pyautogui.keyDown('ctrl')
            time.sleep(0.2)
            pyautogui.press('a')
            time.sleep(0.2)
            pyautogui.press('c')
            time.sleep(0.2)
            pyautogui.keyUp('ctrl')

            # Paste Data for Parsing
            output = pyperclip.paste()

            # Parsing the Process Data
            process_lines = output.strip().splitlines()
            pid_to_kill = []

            # Identify the PID using regex for "LAB"
            for line in process_lines:
                match = re.search(r'(\d+)\s*$', line)
                if match:
                    pid = match.groups()[0]
                    pid_to_kill.append(pid)

            # Kill all identified LAB processes
            for pid in pid_to_kill:
                print(f"Killing Process with PID: {pid}")
                kill_command = f'taskkill /PID {pid} /F'
                pyperclip.copy(kill_command)
                pyautogui.keyDown('ctrl')
                time.sleep(0.2)
                pyautogui.press('v')
                time.sleep(0.1)
                pyautogui.keyUp('ctrl')
                pyautogui.press('enter')
                time.sleep(4)

            # Delete RDP Credentials
            delete_cred = f'cmdkey /delete: TERMSRV/{machineName}'
            subprocess.run(delete_cred, shell=True)
            time.sleep(2)

            # Delete RDP File
            os.remove(rdp_file)
            time.sleep(2)
            print(f'Successfully logged off and killed processes on Server: {server}\n')
            break

        if time.time() - start > max_wait:
            failed_list.append(machineName)
            break
        time.sleep(0.5)

    count += 1

print(f'Completed the task for {count - len(failed_list)} servers successfully!')
print(f'Failed to connect to {len(failed_list)} servers:\n')

log_file = dir + r"\failed_serverlist.log"
open(log_file, 'w').close()
with open(log_file, 'a') as f:
    for item in failed_list:
        f.write(f"{item}\n")
print(f"Failed logs saved in {log_file}")
