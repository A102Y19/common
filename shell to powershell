# Configuration Variables
param (
    [string]$riseEnv  # DEV/QA/PROD
)

######################
## Helper Functions ##
######################

function riseApiVariables {
    param (
        [string]$riseEnv
    )

    switch ($riseEnv) {
        "DEV" {
            # RISE DEV configs
            $riseAuthUrl = "https://dev.auth.rise.apps.jnj.com/v1/auth/login"
            $riseAuthRefreshUrl = "http://dev.auth.rise.apps.jnj.com/v1/auth/refresh-token"
            $riseTemplateInvokeUrl = "https://dev.aggregator.rise.apps.jnj.com/v1/aggregator/discovery/executeJobV2/"
            $riseJobLogUrl = "https://dev.smartops.rise.apps.jnj.com/dnd/job-status/"
            $clientId = "65f430bbd2201dfc4e960898"
            $clientSecret = "30e66f703ee79afa684057d497a1b9e68c9cdefa2ccd1b404b233ce9da6f586a"
            $archAutoReactTemplateId = 102830
            break
        }
        "QA" {
            # RISE QA configs
            $riseAuthUrl = "https://qa.auth.rise.apps.jnj.com/v1/auth/login"
            $riseAuthRefreshUrl = "http://qa.auth.rise.apps.jnj.com/v1/auth/refresh-token"
            $riseTemplateInvokeUrl = "https://qa.aggregator.rise.apps.jnj.com/v1/aggregator/discovery/executeJobV2/"
            $riseJobLogUrl = "https://qa.smartops.rise.apps.jnj.com/dnd/job-status/"
            $clientId = "66b0d149011bca2aec55546d"
            $clientSecret = "ce176e9cdbe6ee8438868cec3805ca8f7edc439f7beb38a1f7d48a11dc40138e"
            $archAutoReactTemplateId = 100618
            break
        }
        "PROD" {
            # RISE PROD configs
            $riseAuthUrl = "https://auth.rise.apps.jnj.com/v1/auth/login"
            $riseAuthRefreshUrl = "http://auth.rise.apps.jnj.com/v1/auth/refresh-token"
            $riseTemplateInvokeUrl = "https://aggregator.rise.apps.jnj.com/v1/aggregator/discovery/executeJobV2/"
            $riseJobLogUrl = "https://smartops.rise.apps.jnj.com/dnd/job-status/"
            $clientId = "66b0d1bec617e5832c03191a"
            $clientSecret = "b2a208076c9195df997f7e9cfa33a49a6b917205553edfe0d11f10630d6064be"
            $archAutoReactTemplateId = 100148
            break
        }
        default {
            Write-Host "Invalid riseEnv value provided"
        }
    }
}

function getJsonVal {
    param (
        [string]$jsonPath
    )

    $json = Get-Content -Raw -Path $stdin
    $jsonObject = $json | ConvertFrom-Json
    $result = $jsonObject | Select-Object -ExpandProperty $jsonPath
    $result | ConvertTo-Json
}

function generateBearerToken {
    param (
        [string]$riseAuthUrl,
        [string]$clientId,
        [string]$clientSecret
    )

    # Generate the login response
    $loginResponse = Invoke-RestMethod -Uri $riseAuthUrl -Method Post -ContentType "application/json" -Body (@{
        clientId     = $clientId
        clientSecret = $clientSecret
    } | ConvertTo-Json)

    # Extract tokens and userId
    $userId = $loginResponse.data.user.userId
    $accessToken = $loginResponse.data.user.accessToken
    $refreshToken = $loginResponse.data.user.refreshToken

    # Check token validity and refresh if needed
    if (checkTokenValidity -accessToken $accessToken) {
        $accessToken = refreshToken -userId $userId -refreshToken $refreshToken
    }

    # Return the access token
    return $accessToken
}

function checkTokenValidity {
    param (
        [string]$accessToken
    )

    # Extract the payload (middle part of JWT)
    $payload = $accessToken.Split('.')[1]

    # Add padding if required (Base64 in JWT is URL-safe and often unpadded)
    switch ($payload.Length % 4) {
        2 { $payload += '==' }
        3 { $payload += '=' }
        1 { $payload += '===' }
    }

    # Decode the Base64 (convert from URL-safe base64 to standard base64)
    $payload = $payload.Replace('-', '+').Replace('_', '/')
    $decodedPayload = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload))

    # Convert JSON to object and get expiry time
    $payloadObj = $decodedPayload | ConvertFrom-Json
    $expiryTime = $payloadObj.exp
    $currentTime = [int][double]::Parse((Get-Date -UFormat %s))

    # Compare times
    if ($currentTime -ge $expiryTime) {
        return $true  # Token expired
    } else {
        return $false # Token still valid
    }
}

function refreshToken {
    param (
        [string]$userId,
        [string]$refreshToken
    )

    $url = "$riseAuthRefreshUrl/$userId"
    $headers = @{
        "Content-Type" = "application/json"
    }
    $body = @{
        refreshToken = $refreshToken
    } | ConvertTo-Json

    try {
        $response = Invoke-RestMethod -Method Patch -Uri $url -Headers $headers -Body $body
        $accessToken = $response.data.user.accessToken
        return $accessToken
    } catch {
        Write-Error "Failed to refresh token: $_"
        return $null
    }
}

function invokeRiseTemplate {
    param (
        [string]$templateId
    )

    # Generate Bearer Token
    generateBearerToken

    $dbHost = $env:COMPUTERNAME  # Equivalent to `hostname`
    $apiQuery = '?query=[{"category":"ciOsVmHostname","operator":"==","value":"' + $dbHost + '"},{"category":"ciSapNameSid","operator":"==","value":"' + $V_SID + '"}]'

    $invokeUrl = "${riseTemplateInvokeUrl}${templateId}${apiQuery}"
    $headers = @{
        "Content-Type"  = "application/json"
        "Authorization" = "Bearer $accessToken"
    }

    $body = @{
        globalVariables = @(
            @{ variableKey = '$sidadm'; variableValue = $sidadmAcc },
            @{ variableKey = '$orasid'; variableValue = $orasidAcc }
        )
        groupInfo = @("app-rise-admin", "app-rise-support-l1")
    } | ConvertTo-Json -Depth 5

    try {
        $response = Invoke-RestMethod -Uri $invokeUrl -Method Post -Headers $headers -Body $body -UseBasicParsing
        $parentId = $response.data.parentId
    } catch {
        Write-Error "Failed to invoke template: $_"
        return
    }

    Start-Sleep -Seconds 10

    # Poll job status
    $jobStatus = "Running"
    checkRiseJob -parentId $parentId
    while ($jobStatus -eq "Running") {
        Start-Sleep -Seconds 10
        checkRiseJob -parentId $parentId
    }
}

function checkRiseJob {
    param (
        [string]$jobId
    )

    # Generate a new Bearer token
    generateBearerToken

    $headers = @{
        "Authorization" = "Bearer $accessToken"
    }

    $url = "$riseJobLogUrl$jobId"

    try {
        $response = Invoke-RestMethod -Uri $url -Method Get -Headers $headers -UseBasicParsing
        $script:jobStatus = $response.data.status  # store globally to access outside the function
    } catch {
        Write-Error "Failed to check job status: $_"
        $script:jobStatus = "Unknown"
    }
}

