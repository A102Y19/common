import os
import shutil  # For moving files
import zipfile  # For extracting files
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import sys  # To stop script on login failure

# Load Excel file
file_path = "C:/PAK/PAK_Standard_requirement.xlsx"
df = pd.read_excel(file_path)

# Set Chrome options
options = webdriver.ChromeOptions()
options.add_argument("--log-level=3")

def get_download_path():
    return os.path.join(os.path.expanduser("~"), "Downloads")

def transfer_and_unzip_PAK_file(source_file, target_path):
    """Move the downloaded file to target folder and immediately unzip it."""
    destination_file = os.path.join(target_path, os.path.basename(source_file))
    try:
        if os.path.exists(source_file):
            shutil.move(source_file, destination_file)
            print(f"✅ File moved successfully to: {destination_file}")
            
            # Check if it's a ZIP file and unzip it immediately
            if destination_file.endswith(".zip"):
                try:
                    with zipfile.ZipFile(destination_file, 'r') as zip_ref:
                        zip_ref.extractall(target_path)
                    print(f"✅ Extracted '{os.path.basename(destination_file)}' to {target_path}")
                except Exception as e:
                    print(f"❌ Error extracting file: {e}")
            
            return True
        else:
            print(f"❌ File move failed: '{source_file}' not found")
            return False
    except Exception as e:
        print(f"❌ Error moving file '{source_file}': {e}")
        return False

# Initialize Chrome WebDriver only once
driver = webdriver.Chrome(options=options)
time.sleep(5)

# Variable to track open tabs
pak_tab_opened = False
downloaded_file_path = None

downloaded_file_name = None  # To store the file name

for index, row in df.iterrows():
    action = str(row["Action"]).strip().lower()
    requirement = str(row["Requirement"]).strip().upper()
    input_value = str(row["Inputs"]).strip()

    print(f"Checking action: '{action}', Requirement: '{requirement}', Input: '{input_value}'")

    if action == "download pak file" and requirement == "Y" and input_value:
        if pak_tab_opened:
            driver.switch_to.window(driver.window_handles[-1])
            downloaded_file_path = os.path.join(get_download_path(), input_value)
            downloaded_file_name = input_value
            print(f"✅ Mock Download Complete: {downloaded_file_path}")  # Replace with actual download logic
        else:
            print("Cannot download PAK file: PAK File Path tab is not open.")
    
    elif action == "transfer pak file" and requirement == "Y" and input_value:
        if downloaded_file_path:
            transfer_success = transfer_and_unzip_PAK_file(downloaded_file_path, input_value)
            if transfer_success:
                print(f"✅ File transferred and unzipped successfully to {input_value}.")
            else:
                print(f"❌ Transfer failed to {input_value}.")
        else:
            print("❌ No file available to transfer and unzip.")

input("Press Enter to close")
print("All tasks completed successfully!")
