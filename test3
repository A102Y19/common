import os
import sys
import time
import logging
import subprocess
import pyautogui
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from pywinauto import Application, findwindows
from pywinauto.keyboard import send_keys

# Get password from environment variable
password = os.getenv("OMP_pass")
if not password:
    print("Error: Environment variable 'OMP_pass' not found!")
    sys.exit(1)

# Define log file path (same as batch file)
log_filename = "C:/DeployAgent/log_" + time.strftime("%Y-%m-%d_%H-%M-%S") + ".txt"

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_filename),  # Log to file
        logging.StreamHandler()  # Log to console
    ]
)

# Configure logging (Suppress WebDriver logs)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Edge WebDriver options to suppress logs
edge_options = webdriver.EdgeOptions()
edge_options.add_argument("--log-level=3")  # Suppress most logs
edge_options.add_experimental_option("excludeSwitches", ["enable-logging"])  # Remove console logs

# Initialize WebDriver
driver = None  

try:
    logging.info("Starting Edge WebDriver...")
    driver = webdriver.Edge(options=edge_options)

    # Step 1: Open the URL
    url = "https://rdwatest.na.jnj.com/RDWeb/Pages/en-US/login.aspx"
    logging.info(f"Opening URL: {url}")
    driver.get(url)

    # Step 2: Wait for Username & Password Fields
    wait = WebDriverWait(driver, 10)

    try:
        logging.info("Finding username and password fields...")
        username_field = wait.until(EC.presence_of_element_located((By.ID, "DomainUserName")))
        password_field = wait.until(EC.presence_of_element_located((By.ID, "UserPass")))

        logging.info("Entering credentials...")
        username_field.send_keys("NA\\gyellap1")
        password_field.send_keys(password)
    except TimeoutException:
        logging.error("Username or password field not found!")
        exit(1)

    # Step 3: Click the Sign In Button
    try:
        logging.info("Waiting for Sign In button...")
        sign_in_button = wait.until(EC.element_to_be_clickable((By.ID, "btnSignIn")))
        logging.info("Clicking the Sign In button...")
        sign_in_button.click()
    except TimeoutException:
        logging.error("Sign In button not found!")
        exit(1)

    # Step 4: Wait for Login Confirmation
    time.sleep(5)
    logging.info("Login successful.")

    # Step 5: Click on "OMP LAB INSTANCE"
    try:
        logging.info("Searching for OMP LAB INSTANCE button...")
        instance_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[contains(text(), 'OMP LAB INSTANCE')]") ))
        logging.info("Clicking OMP LAB INSTANCE button...")
        instance_button.click()
    except TimeoutException:
        logging.error("OMP LAB INSTANCE button not found!")
        exit(1)

    # Step 6: Wait for the .rdp file to download
    time.sleep(5)
    download_path = os.path.join(os.path.expanduser("~"), "Downloads")
    rdp_file = None

    # Find the latest downloaded .rdp file
    for file in os.listdir(download_path):
        if file.endswith(".rdp"):
            rdp_file = os.path.join(download_path, file)
            break

    if not rdp_file:
        logging.error("RDP file not found in downloads!")
        exit(1)

    logging.info(f"RDP file found: {rdp_file}")

    # Step 7: Run the .rdp file
    #subprocess.Popen(rdp_file, shell=True)
    time.sleep(15)  # Wait for the RDP window to open

    # Step 8: Handle Password Prompt
    logging.info("Checking for password prompt...")

    try:
        send_keys(password)  # Type the password
        time.sleep(2)
        send_keys("{ENTER}")  # Press Enter
        logging.info("Password entered, waiting for session...")
        time.sleep(40)  # Wait for session to initialize
        send_keys("{ENTER}")  # Press Enter again if needed
        logging.info("Entered second ENTER, waiting for OMP to launch...")
    except Exception as e:
        logging.error(f"Error entering password: {e}")


    # Step 9: Wait for OMP Plus Application to Launch
    logging.info("Waiting for OMP Plus application to launch...")
    omp_app = None
    max_attempts = 5
    interval = 5  # Seconds between each check

    for attempt in range(max_attempts):
        try:
            windows = findwindows.find_windows(title_re=".*OMP Plus.*", backend='win32')
            if windows:
                omp_app = Application().connect(handle=windows[0])  # Connect to the first found instance
                logging.info("OMP Plus application detected.")
                break
            else:
                logging.info(f"Attempt {attempt + 1}: OMP Plus is Not Running. Retrying...")
        except Exception as e:
            logging.info(f"Attempt {attempt + 1}: OMP Plus is Not Running - {e}")
        
        time.sleep(10)

    if not omp_app:
        logging.error("OMP Plus application did not launch within the timeout!")
        exit(1)

    # Step 10: Interact with OMP Plus
    try:
        omp_window = omp_app.top_window()
        omp_window.set_focus()
        time.sleep(1)  # Short delay to allow window focus

        # Send commands to interact with the application
        logging.info("Sending Alt + U...")
        omp_window.type_keys('%u')
        time.sleep(1)
        logging.info("Sending C...")
        omp_window.type_keys('C')
        time.sleep(1)
        logging.info("Sending U...")
        omp_window.type_keys('U')
        time.sleep(2)
        logging.info("Sending LEFT...")
        send_keys("{LEFT}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 2}") # Step 2: Nine Right
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}") # Step 5: Two Enter
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 2}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        logging.info("Initiated Installing Base solution Build.")
        time.sleep(60)

    except Exception as e:
        logging.error(f"Error during interaction with OMP Plus: {e}")

    # Additional Step: Interact with OMP Lock Manager
    time.sleep(60)  # Let the OMP Lock Manager stabilize
    try:
        logging.info("Connecting to OMP Lock Manager...")
        app = Application(backend="uia").connect(title_re="OMP Lock Manager.*")
        window = app.window(title_re="OMP Lock Manager.*")
        window.set_focus()
        time.sleep(5)

        logging.info("Performing key sequence...")
        send_keys("{TAB}")     # Step 1: One Tab
        time.sleep(1)
        send_keys("{RIGHT 9}") # Step 2: Nine Right
        time.sleep(1)
        send_keys("%")         # Step 3: Alt key
        time.sleep(1)
        send_keys("{TAB 2}")   # Step 4: Two Tab
        time.sleep(1)
        send_keys("{ENTER 2}") # Step 5: Two Enter
        time.sleep(1)
        send_keys("{DOWN 2}")  # Step 6: Two Down
        time.sleep(1)
        send_keys("{ENTER}")   # Step 7: One Enter
        time.sleep(1)
        send_keys("No")        # Step 8: Type 'No'
        time.sleep(1)
        send_keys("{ENTER}")   # Step 9: One Enter
        time.sleep(1)
        send_keys("^a")        # Step 10: Ctrl + A
        time.sleep(1)
        send_keys("{DELETE}")  # Step 11: Delete
        time.sleep(1)

        logging.info("Key sequence executed successfully!")
        
        # Closing the OMP Lock Manager
        logging.info("Closing OMP Lock Manager...")
        window.set_focus()
        window.type_keys('%F')  # Alt + F to open File menu
        time.sleep(1)
        send_keys("x")  # Sending "x" to close the application
        time.sleep(1)
        logging.info("OMP Lock Manager closed successfully.")

    except Exception as e:
        logging.error(f"Error occurred during OMP Lock Manager interaction: {e}")

    # Step 10: Close OMP Plus
    try:
        omp_window.set_focus()
        omp_window.type_keys('%F')  # Open File menu
        time.sleep(1)

        logging.info("Sending x to close OMP Plus...")
        omp_window.type_keys('x')    # Close command
        time.sleep(1)
        logging.info("OMP Plus closed successfully.")

    except Exception as e:
        logging.error(f"Error occurred while closing OMP Plus: {e}")

finally:
    # Terminate the RDP connection (uncomment to use)
   # terminate_rdp_connection()

    # Quit the WebDriver
    if driver:
        driver.quit()

