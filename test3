import os
import sys
import time
import logging
import subprocess
import pyautogui
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from pywinauto import Application, findwindows
from pywinauto.keyboard import send_keys

# Get password from environment variable
password = os.getenv("OMP_pass")
if not password:
    print("Error: Environment variable 'OMP_pass' not found!")
    sys.exit(1)

log_filename = "C:/DeployAgent/log_" + time.strftime("%Y-%m-%d_%H-%M-%S") + ".txt"

def launching_OMP():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(log_filename),
            logging.StreamHandler()
        ]
    )

    edge_options = webdriver.EdgeOptions()
    edge_options.add_argument("--log-level=3")
    edge_options.add_experimental_option("excludeSwitches", ["enable-logging"])

    driver = None

    try:
        logging.info("Starting Edge WebDriver...")
        driver = webdriver.Edge(options=edge_options)

        url = "https://rdwatest.na.jnj.com/RDWeb/Pages/en-US/login.aspx"
        logging.info(f"Opening URL: {url}")
        driver.get(url)

        wait = WebDriverWait(driver, 10)

        logging.info("Finding username and password fields...")
        username_field = wait.until(EC.presence_of_element_located((By.ID, "DomainUserName")))
        password_field = wait.until(EC.presence_of_element_located((By.ID, "UserPass")))

        logging.info("Entering credentials...")
        username_field.send_keys("NA\\gyellap1")
        password_field.send_keys(password)

        logging.info("Clicking the Sign In button...")
        sign_in_button = wait.until(EC.element_to_be_clickable((By.ID, "btnSignIn")))
        sign_in_button.click()

        time.sleep(5)
        logging.info("Login successful.")

        logging.info("Clicking OMP LAB INSTANCE button...")
        instance_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[contains(text(), 'OMP LAB INSTANCE')]")))
        instance_button.click()

        time.sleep(5)
        download_path = os.path.join(os.path.expanduser("~"), "Downloads")
        rdp_file = None

        for file in os.listdir(download_path):
            if file.endswith(".rdp"):
                rdp_file = os.path.join(download_path, file)
                break

        if not rdp_file:
            logging.error("RDP file not found in downloads!")
            exit(1)

        logging.info(f"RDP file found: {rdp_file}")
        time.sleep(15)

        send_keys(password)
        time.sleep(2)
        send_keys("{ENTER}")
        time.sleep(40)
        send_keys("{ENTER}")
        logging.info("Entered credentials, waiting for OMP to launch...")

        omp_app = None
        for _ in range(5):
            try:
                windows = findwindows.find_windows(title_re=".*OMP Plus.*", backend='win32')
                if windows:
                    omp_app = Application().connect(handle=windows[0])
                    logging.info("OMP Plus application detected.")
                    break
            except Exception as e:
                logging.info("OMP Plus not running yet, retrying...")
            time.sleep(10)

        if not omp_app:
            logging.error("OMP Plus did not launch!")
            exit(1)

        return omp_app

    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        if driver:
            driver.quit()


def base_solution_build(omp_app):
    try:
        omp_window = omp_app.top_window()
        omp_window.set_focus()
        time.sleep(1)

        logging.info("Sending Alt + U...")
        omp_window.type_keys('%u')
        time.sleep(1)
        logging.info("Sending C...")
        omp_window.type_keys('C')
        time.sleep(1)
        logging.info("Sending U...")
        omp_window.type_keys('U')
        time.sleep(2)
        logging.info("Sending LEFT...")
        send_keys("{LEFT}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 2}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 2}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        logging.info("Initiated Installing Base solution Build.")
        time.sleep(30)

    except Exception as e:
        logging.error(f"Error during Base Solution Build: {e}")

def industry_solution_build(omp_app):
    try:
        omp_window = omp_app.top_window()
        omp_window.set_focus()
        time.sleep(1)

        logging.info("Sending Alt + U...")
        omp_window.type_keys('%u')
        time.sleep(1)
        logging.info("Sending C...")
        omp_window.type_keys('C')
        time.sleep(1)
        logging.info("Sending U...")
        omp_window.type_keys('U')
        time.sleep(2)
        logging.info("Sending LEFT...")
        send_keys("{LEFT}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 2}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 3}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        logging.info("Initiated Installing Industry solution Build.")
        time.sleep(30)

    except Exception as e:
        logging.error(f"Error during industry Solution Build: {e}")

def proejct_solution_build(omp_app):
    try:
        omp_window = omp_app.top_window()
        omp_window.set_focus()
        time.sleep(1)

        logging.info("Sending Alt + U...")
        omp_window.type_keys('%u')
        time.sleep(1)
        logging.info("Sending C...")
        omp_window.type_keys('C')
        time.sleep(1)
        logging.info("Sending U...")
        omp_window.type_keys('U')
        time.sleep(2)
        logging.info("Sending LEFT...")
        send_keys("{LEFT}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 2}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        time.sleep(2)
        logging.info("Sending DOWN...")
        send_keys("{DOWN 4}")
        time.sleep(2)
        logging.info("Sending ENTER...")
        send_keys("{ENTER}")
        logging.info("Initiated Installing project solution Build.")
        time.sleep(30)

    except Exception as e:
        logging.error(f"Error during project Solution Build: {e}")

def main_launcher():
    excel_file = "C:/PAK/PAK_Standard_requirement.xlsx"
    try:
        df = pd.read_excel(excel_file, sheet_name=1)
    except Exception as e:
        print(f"Failed to load Excel: {e}")
        return

    omp_app = None

    for index, row in df.iterrows():
        action = str(row.iloc[0]).strip().lower()
        requirement = str(row.iloc[1]).strip().upper()

        if requirement == "Y":
            if "launch omp" in action:
                omp_app = launching_OMP()
            elif "base build" in action:
                if omp_app:
                    base_solution_build(omp_app)
            elif "project build" in action:
                if omp_app:
                    proejct_solution_build(omp_app)
            elif "industry build" in action:
                if omp_app:
                    industry_solution_build(omp_app)

                else:
                    print("OMP not launched yet, skipping base build.")
            else:
                print(f"Unknown action '{action}', skipping...")
        else:
            print(f"Skipping '{action}' as requirement is N")


if __name__ == "__main__":
    main_launcher()
