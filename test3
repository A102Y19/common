import os
import sys
import time
import logging
import subprocess
import pyautogui
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from pywinauto import Application, findwindows
from pywinauto.keyboard import send_keys

# Get password from environment variable
password = os.getenv("OMP_pass")
if not password:
    print("Error: Environment variable 'OMP_pass' not found!")
    sys.exit(1)

# Define log file path
log_filename = "C:/DeployAgent/log_" + time.strftime("%Y-%m-%d_%H-%M-%S") + ".txt"


def launching_OMP():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(log_filename),
            logging.StreamHandler()
        ]
    )

    edge_options = webdriver.EdgeOptions()
    edge_options.add_argument("--log-level=3")
    edge_options.add_experimental_option("excludeSwitches", ["enable-logging"])

    driver = None

    try:
        logging.info("Starting Edge WebDriver...")
        driver = webdriver.Edge(options=edge_options)

        url = "https://rdwatest.na.jnj.com/RDWeb/Pages/en-US/login.aspx"
        logging.info(f"Opening URL: {url}")
        driver.get(url)

        wait = WebDriverWait(driver, 10)

        try:
            logging.info("Finding username and password fields...")
            username_field = wait.until(EC.presence_of_element_located((By.ID, "DomainUserName")))
            password_field = wait.until(EC.presence_of_element_located((By.ID, "UserPass")))

            logging.info("Entering credentials...")
            username_field.send_keys("NA\\gyellap1")
            password_field.send_keys(password)
        except TimeoutException:
            logging.error("Username or password field not found!")
            exit(1)

        try:
            logging.info("Waiting for Sign In button...")
            sign_in_button = wait.until(EC.element_to_be_clickable((By.ID, "btnSignIn")))
            logging.info("Clicking the Sign In button...")
            sign_in_button.click()
        except TimeoutException:
            logging.error("Sign In button not found!")
            exit(1)

        time.sleep(5)
        logging.info("Login successful.")

        try:
            logging.info("Searching for OMP LAB INSTANCE button...")
            instance_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[contains(text(), 'OMP LAB INSTANCE')]")))
            logging.info("Clicking OMP LAB INSTANCE button...")
            instance_button.click()
        except TimeoutException:
            logging.error("OMP LAB INSTANCE button not found!")
            exit(1)

        time.sleep(5)
        download_path = os.path.join(os.path.expanduser("~"), "Downloads")
        rdp_file = None

        for file in os.listdir(download_path):
            if file.endswith(".rdp"):
                rdp_file = os.path.join(download_path, file)
                break

        if not rdp_file:
            logging.error("RDP file not found in downloads!")
            exit(1)

        logging.info(f"RDP file found: {rdp_file}")

        time.sleep(15)

        logging.info("Checking for password prompt...")
        try:
            send_keys(password)
            time.sleep(2)
            send_keys("{ENTER}")
            logging.info("Password entered, waiting for session...")
            time.sleep(40)
            send_keys("{ENTER}")
            logging.info("Entered second ENTER, waiting for OMP to launch...")
        except Exception as e:
            logging.error(f"Error entering password: {e}")

        logging.info("Waiting for OMP Plus application to launch...")
        omp_app = None
        max_attempts = 5

        for attempt in range(max_attempts):
            try:
                windows = findwindows.find_windows(title_re=".*OMP Plus.*", backend='win32')
                if windows:
                    omp_app = Application().connect(handle=windows[0])
                    logging.info("OMP Plus application detected.")
                    break
                else:
                    logging.info(f"Attempt {attempt + 1}: OMP Plus is Not Running. Retrying...")
            except Exception as e:
                logging.info(f"Attempt {attempt + 1}: OMP Plus is Not Running - {e}")
            time.sleep(10)

        if not omp_app:
            logging.error("OMP Plus application did not launch within the timeout!")
            exit(1)

        try:
            omp_window = omp_app.top_window()
            omp_window.set_focus()
            time.sleep(1)

            logging.info("Sending Alt + U...")
            omp_window.type_keys('%u')
            time.sleep(1)
            logging.info("Sending C...")
            omp_window.type_keys('C')
            time.sleep(1)
            logging.info("Sending U...")
            omp_window.type_keys('U')
            time.sleep(2)
            logging.info("Sending LEFT...")
            send_keys("{LEFT}")
            time.sleep(2)
            logging.info("Sending DOWN...")
            send_keys("{DOWN 2}")
            time.sleep(2)
            logging.info("Sending ENTER...")
            send_keys("{ENTER}")
            time.sleep(2)
            logging.info("Sending DOWN...")
            send_keys("{DOWN 2}")
            time.sleep(2)
            logging.info("Sending ENTER...")
            send_keys("{ENTER}")
            logging.info("Initiated Installing Base solution Build.")
            time.sleep(60)
        except Exception as e:
            logging.error(f"Error during interaction with OMP Plus: {e}")

        try:
            omp_window.set_focus()
            omp_window.type_keys('%F')
            time.sleep(1)
            logging.info("Sending x to close OMP Plus...")
            omp_window.type_keys('x')
            time.sleep(1)
            logging.info("OMP Plus closed successfully.")
        except Exception as e:
            logging.error(f"Error occurred while closing OMP Plus: {e}")

    finally:
        if driver:
            driver.quit()


def main_launcher():
    excel_file = "C:/PAK/PAK_Standard_requirement.xlsx"
    try:
        df = pd.read_excel(excel_file, sheet_name=1)
    except Exception as e:
        print(f"Failed to load Excel: {e}")
        return

    for index, row in df.iterrows():
        action = str(row[0]).strip().lower()
        requirement = str(row[1]).strip().upper()

        if requirement == "Y":
            if "launch omp" in action:
                launching_OMP()
            else:
                print(f"Unknown action '{action}', skipping...")


if __name__ == "__main__":
    main_launcher()
