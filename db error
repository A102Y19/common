from pywinauto import Desktop
import time
import pyautogui

def wait_for_update_installer_and_information():
    print("üîç Searching inside OMP for 'Update Installer'...")

    omp_window = None
    while omp_window is None:
        try:
            windows = Desktop(backend="uia").windows()
            for win in windows:
                if "OMP Data Change Manager" in win.window_text():
                    omp_window = win
                    print("‚úÖ OMP Main window found.")
                    break
        except Exception as e:
            print(f"Error finding main window: {e}")
        time.sleep(5)

    while True:
        all_panes = omp_window.descendants(control_type="Pane")
        for pane in all_panes:
            if "Update Installer" in pane.window_text():
                print(f"‚úÖ Found 'Update Installer' pane: {pane.window_text()}")
                break
        else:
            time.sleep(10)
            continue
        break

    print("üïí Waiting for 'Information' pane every 60 seconds...")
    while True:
        all_panes = omp_window.descendants(control_type="Pane")
        for pane in all_panes:
            if "Information" in pane.window_text():
                print(f"‚úÖ Found 'Information' pane: {pane.window_text()}")
                print("üí° Skipping text read. Sending ENTER to close popup.")
                pyautogui.press('enter')
                handle_notepad_if_opened()
                return
        time.sleep(60)

def handle_notepad_if_opened(timeout=60):
    print("üîç Checking if Notepad is open after ENTER...")
    notepad_window = None
    start_time = time.time()

    while notepad_window is None and (time.time() - start_time < timeout):
        try:
            windows = Desktop(backend="uia").windows()
            for win in windows:
                if "Notepad" in win.window_text():
                    notepad_window = win
                    print("‚úÖ Notepad window found.")
                    break
        except Exception as e:
            print(f"Error finding Notepad: {e}")
        time.sleep(5)

    if notepad_window is None:
        print("‚úÖ No Notepad opened.")
        return

    try:
        notepad_edit = notepad_window.child_window(control_type="Edit")
        text = notepad_edit.window_text()
        lines = text.split("\n")
        last_line = lines[-1] if lines else "No error message found"
        print(f"üìù Last line in Notepad: {last_line}")
        notepad_window.close()
        print("‚úÖ Closed Notepad.")
    except Exception as e:
        print(f"‚ùå Error reading or closing Notepad: {e}")
